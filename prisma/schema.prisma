generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                    @id @default(cuid())
  email              String                    @unique
  emailVerified      Boolean                   @default(false)
  emailVerifiedAt    DateTime?
  firstName          String
  lastName           String
  phone              String?
  dateOfBirth        DateTime?
  role               UserRole                  @default(USER)
  status             UserStatus                @default(PENDING_VERIFICATION)
  profilePicture     String?
  monthlyIncome      Decimal?                  @db.Decimal(12, 2)
  currency           String                    @default("USD")
  timezone           String                    @default("UTC")
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  lastLoginAt        DateTime?
  currentPlan        PlanType                  @default(FREE)
  subscriptionId     String?                   @unique
  image              String?
  name               String?
  accounts           account[]                 @relation("UserAccounts")
  auditLogs          AuditLog[]
  budgets            Budget[]
  categories         Category[]
  portfolioSnapshots CryptoPortfolioSnapshot[]
  cryptoWallets      CryptoWallet[]
  financialAccounts  FinancialAccount[]
  goals              Goal[]
  sessions           session[]                 @relation("UserSessions")
  subscription       Subscription?
  transactions       Transaction[]
  usageTracking      UsageTracking[]
  accountGroups      AccountGroup[]

  @@map("users")
}

model FinancialAccount {
  id              String        @id @default(cuid())
  userId          String
  name            String
  type            AccountType
  institutionName String?
  accountNumber   String?
  routingNumber   String?
  balance         Decimal       @default(0) @db.Decimal(12, 2)
  currency        String        @default("USD")
  isActive        Boolean       @default(true)
  plaidAccountId  String?
  plaidItemId     String?
  groupId         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  budgets         Budget[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  group           AccountGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  goals           Goal[]
  transactions    Transaction[]

  @@map("financial_accounts")
}

model Transaction {
  id                 String           @id @default(cuid())
  userId             String
  accountId          String
  categoryId         String?
  amount             Decimal          @db.Decimal(12, 2)
  description        String
  merchantName       String?
  date               DateTime
  pending            Boolean          @default(false)
  plaidTransactionId String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  account            FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category           Category?        @relation(fields: [categoryId], references: [id])
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Category {
  id           String        @id @default(cuid())
  userId       String
  name         String
  icon         String?
  color        String?
  isDefault    Boolean       @default(false)
  parentId     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  budgets      Budget[]
  parent       Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryHierarchy")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("categories")
}

model AccountGroup {
  id                String             @id @default(cuid())
  userId            String
  name              String
  description       String?
  icon              String?
  color             String?
  sortOrder         Int                @default(0)
  parentId          String?
  isDefault         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent            AccountGroup?      @relation("GroupHierarchy", fields: [parentId], references: [id])
  children          AccountGroup[]     @relation("GroupHierarchy")
  financialAccounts FinancialAccount[]
  cryptoWallets     CryptoWallet[]

  @@map("account_groups")
}

model Budget {
  id         String            @id @default(cuid())
  userId     String
  accountId  String?
  categoryId String
  name       String
  amount     Decimal           @db.Decimal(12, 2)
  period     String
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  account    FinancialAccount? @relation(fields: [accountId], references: [id])
  category   Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Goal {
  id            String            @id @default(cuid())
  userId        String
  accountId     String?
  name          String
  description   String?
  targetAmount  Decimal           @db.Decimal(12, 2)
  currentAmount Decimal           @default(0) @db.Decimal(12, 2)
  targetDate    DateTime
  isAchieved    Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  account       FinancialAccount? @relation(fields: [accountId], references: [id])
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Plan {
  id               String         @id @default(cuid())
  type             PlanType       @unique
  name             String
  description      String
  monthlyPrice     Decimal        @db.Decimal(8, 2)
  yearlyPrice      Decimal        @db.Decimal(8, 2)
  isActive         Boolean        @default(true)
  maxAccounts      Int            @default(1)
  maxTransactions  Int            @default(100)
  maxCategories    Int            @default(10)
  maxBudgets       Int            @default(3)
  maxGoals         Int            @default(2)
  aiInsights       Boolean        @default(false)
  advancedReports  Boolean        @default(false)
  prioritySupport  Boolean        @default(false)
  apiAccess        Boolean        @default(false)
  exportData       Boolean        @default(false)
  customCategories Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subscriptions    Subscription[]

  @@map("plans")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  planType             PlanType
  status               SubscriptionStatus @default(ACTIVE)
  billingPeriod        BillingPeriod      @default(MONTHLY)
  amount               Decimal            @db.Decimal(8, 2)
  currency             String             @default("USD")
  startDate            DateTime           @default(now())
  endDate              DateTime?
  currentPeriodStart   DateTime           @default(now())
  currentPeriodEnd     DateTime
  cancelAt             DateTime?
  canceledAt           DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  lastPaymentDate      DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  payments             Payment[]
  plan                 Plan               @relation(fields: [planType], references: [type])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Payment {
  id                    String        @id @default(cuid())
  subscriptionId        String
  amount                Decimal       @db.Decimal(8, 2)
  currency              String        @default("USD")
  status                PaymentStatus @default(PENDING)
  paymentMethodId       String?
  invoiceId             String?
  stripePaymentIntentId String?
  stripeChargeId        String?
  paymentMethod         String?
  periodStart           DateTime?
  periodEnd             DateTime?
  paymentDate           DateTime      @default(now())
  processedAt           DateTime?
  failureReason         String?
  lastPaymentDate       DateTime?
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  subscription          Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model UsageTracking {
  id        String   @id @default(cuid())
  userId    String
  feature   String
  action    String
  timestamp DateTime @default(now())
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_tracking")
}

model account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String?
  user         User      @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)
}

model session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model twoFactor {
  id          String   @id @default(cuid())
  userId      String   @unique
  secret      String
  backupCodes String[]
  enabled     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CryptoWallet {
  id              String                    @id @default(cuid())
  userId          String
  name            String
  address         String
  type            WalletType
  network         BlockchainNetwork
  isActive        Boolean                   @default(true)
  isWatching      Boolean                   @default(true)
  label           String?
  notes           String?
  tags            String[]
  groupId         String?
  lastSyncAt      DateTime?
  syncStatus      String?
  syncError       String?
  totalBalance    Decimal                   @default(0) @db.Decimal(18, 8)
  totalBalanceUsd Decimal                   @default(0) @db.Decimal(12, 2)
  assetCount      Int                       @default(0)
  nftCount        Int                       @default(0)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  crypto_assets   crypto_assets[]
  nfts            CryptoNFT[]
  snapshots       CryptoPortfolioSnapshot[]
  portfolio       CryptoPortfolio?
  positions       CryptoPosition[]
  transactions    CryptoTransaction[]
  user            User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group           AccountGroup?             @relation(fields: [groupId], references: [id], onDelete: SetNull)
  defiPositions   DeFiPosition[]
  defiAppPositions DeFiAppPosition[]

  @@unique([userId, address, network])
  @@index([userId])
  @@index([address])
  @@index([network])
  @@map("crypto_wallets")
}

model CryptoPosition {
  id               String        @id @default(cuid())
  walletId         String
  assetId          String?
  balance          Decimal       @db.Decimal(38, 18)
  balanceFormatted String
  balanceUsd       Decimal       @db.Decimal(12, 2)
  avgCostPrice     Decimal?      @db.Decimal(18, 8)
  totalCostBasis   Decimal?      @db.Decimal(12, 2)
  unrealizedPnl    Decimal?      @db.Decimal(12, 2)
  unrealizedPnlPct Decimal?      @db.Decimal(8, 4)
  dayChange        Decimal?      @db.Decimal(12, 2)
  dayChangePct     Decimal?      @db.Decimal(8, 4)
  isStaked         Boolean       @default(false)
  stakingRewards   Decimal?      @db.Decimal(12, 2)
  lastUpdated      DateTime      @default(now())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  asset            CryptoAssetRegistry? @relation(fields: [assetId], references: [id], onDelete: Cascade)
  wallet           CryptoWallet  @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([balanceUsd])
  @@unique([walletId, assetId], map: "walletId_assetId")
  @@map("crypto_positions")
}

model CryptoTransaction {
  id                   String            @id @default(cuid())
  walletId             String
  hash                 String
  blockNumber          BigInt?
  transactionIndex     Int?
  network              BlockchainNetwork
  type                 TransactionType
  status               TransactionStatus
  timestamp            DateTime
  fromAddress          String
  toAddress            String
  value                Decimal           @db.Decimal(38, 18)
  valueFormatted       String
  valueUsd             Decimal?          @db.Decimal(12, 2)
  gasUsed              BigInt?
  gasPrice             Decimal?          @db.Decimal(18, 8)
  gasCost              Decimal?          @db.Decimal(18, 8)
  gasCostUsd           Decimal?          @db.Decimal(12, 2)
  assetId              String?
  assetSymbol          String
  assetContractAddress String?
  methodId             String?
  inputData            String?
  logs                 Json?
  internalTxs          Json?
  parentTxHash         String?
  relatedTxHashes      String[]
  category             String?
  tags                 String[]
  notes                String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  asset                CryptoAssetRegistry? @relation("AssetTransactions", fields: [assetId], references: [id])
  wallet               CryptoWallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([hash, network])
  @@index([walletId])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([timestamp])
  @@index([type])
  @@index([status])
  @@map("crypto_transactions")
}

model CryptoNFT {
  id               String            @id @default(cuid())
  walletId         String
  contractAddress  String
  tokenId          String
  standard         NFTStandard
  network          BlockchainNetwork
  name             String?
  description      String?
  imageUrl         String?
  animationUrl     String?
  externalUrl      String?
  attributes       Json?
  collectionName   String?
  collectionSymbol String?
  collectionSlug   String?
  ownerAddress     String
  quantity         BigInt            @default(1)
  transferredAt    DateTime?
  lastSalePrice    Decimal?          @db.Decimal(18, 8)
  lastSalePriceUsd Decimal?          @db.Decimal(12, 2)
  floorPrice       Decimal?          @db.Decimal(18, 8)
  floorPriceUsd    Decimal?          @db.Decimal(12, 2)
  estimatedValue   Decimal?          @db.Decimal(12, 2)
  isSpam           Boolean           @default(false)
  isNsfw           Boolean           @default(false)
  rarity           String?
  rarityRank       Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  wallet           CryptoWallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, contractAddress, tokenId, network])
  @@index([walletId])
  @@index([contractAddress])
  @@index([collectionSlug])
  @@map("crypto_nfts")
}

model DeFiPosition {
  id                    String            @id @default(cuid())
  walletId              String
  protocolName          String
  protocolType          String
  contractAddress       String
  network               BlockchainNetwork
  positionType          String
  poolName              String?
  totalValueUsd         Decimal           @db.Decimal(12, 2)
  principalUsd          Decimal?          @db.Decimal(12, 2)
  yieldEarned           Decimal?          @db.Decimal(12, 2)
  yieldEarnedUsd        Decimal?          @db.Decimal(12, 2)
  apr                   Decimal?          @db.Decimal(8, 4)
  apy                   Decimal?          @db.Decimal(8, 4)
  dailyYield            Decimal?          @db.Decimal(12, 2)
  totalReturn           Decimal?          @db.Decimal(12, 2)
  totalReturnPct        Decimal?          @db.Decimal(8, 4)
  assets                Json?
  isActive              Boolean           @default(true)
  canWithdraw           Boolean           @default(true)
  lockupEnd             DateTime?
  positionData          Json?
  lastYieldClaim        DateTime?

  // Zapper Integration Fields
  zapperAppId           String?
  zapperGroupId         String?
  zapperPositionAddress String?
  appImageUrl           String?           // Protocol/app image URL
  metaType              String?           // SUPPLIED, BORROWED, CLAIMABLE, etc.
  underlyingTokens      Json?             // Detailed token breakdown with images
  displayProps          Json?             // Comprehensive display properties from Zapper
  syncSource            String            @default("zapper")
  externalPositionId    String?           // Unique identifier from external source
  lastSyncAt            DateTime?         @default(now())

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  wallet                CryptoWallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([protocolName])
  @@index([positionType])
  @@index([zapperAppId])
  @@index([metaType])
  @@index([syncSource])
  @@index([lastSyncAt])
  @@unique([walletId, contractAddress, network, syncSource])
  @@map("defi_positions")
}

// New normalized DeFi schema - Apps and Positions separated
model DeFiApp {
  id               String            @id @default(cuid())

  // App identification
  slug             String            // e.g., "lido", "aave", "compound"
  network          BlockchainNetwork? // Network where this app instance exists
  displayName      String            // e.g., "Lido", "Aave", "Compound"
  description      String?           // App description
  url              String?           // App website URL
  imgUrl           String?           // App logo/image URL

  // App metadata
  category         String?           // e.g., "Staking", "Lending", "DEX"
  subcategory      String?           // More specific category
  isVerified       Boolean           @default(false)
  riskScore        Int?              @default(50) // 0-100, higher = riskier

  // Tracking
  totalValueLocked  Decimal?         @db.Decimal(15, 2) // Optional TVL data
  userCount        Int?              // Optional user count

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  lastSyncAt       DateTime?

  // Relations
  positions        DeFiAppPosition[]

  // Index for slug (unique constraint will be handled at application level for now)
  @@index([slug, network])
  @@index([slug])
  @@index([network])
  @@index([category])
  @@index([isVerified])
  @@map("defi_apps")
}

model DeFiAppPosition {
  id                    String            @id @default(cuid())

  // Relations
  walletId              String
  appId                 String

  // Position identification (from Zapper)
  contractAddress       String            // Position contract address
  network               BlockchainNetwork
  positionType          String            // "app-token", "contract-position", etc.
  groupId               String?           // e.g., "wsteth", "lending-pool"
  groupLabel            String?           // e.g., "wstETH", "Lending Pool"

  // Token details
  symbol                String?           // e.g., "wstETH", "aDAI"
  decimals              Int               @default(18)

  // Balance & Value
  balance               Decimal           @db.Decimal(38, 18) // Raw balance
  balanceFormatted      String?           // Human readable balance
  balanceUSD            Decimal           @db.Decimal(12, 2)  // USD value
  price                 Decimal?          @db.Decimal(18, 8)  // Price per token

  // Position metadata
  metaType              String?           // SUPPLIED, BORROWED, CLAIMABLE, etc.
  isActive              Boolean           @default(true)
  canWithdraw           Boolean           @default(true)
  lockupEnd             DateTime?

  // Yield/APY data
  apy                   Decimal?          @db.Decimal(8, 4)
  apr                   Decimal?          @db.Decimal(8, 4)
  dailyYield            Decimal?          @db.Decimal(12, 2)
  yieldEarned           Decimal?          @db.Decimal(12, 2)
  yieldEarnedUsd        Decimal?          @db.Decimal(12, 2)
  lastYieldClaim        DateTime?

  // Underlying tokens and composition
  pricePerShare         Json?             // Array of price per share ratios
  tokens                Json?             // Underlying token breakdown
  supply                Decimal?          @db.Decimal(38, 18) // Total supply of the position token

  // Display and UI data
  displayProps          Json?             // Display properties (label, images, etc.)

  // Sync metadata
  syncSource            String            @default("zapper")
  externalPositionId    String?           // External source ID
  lastSyncAt            DateTime?         @default(now())

  // Raw data backup
  rawData               Json?             // Complete raw response for debugging

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  wallet                CryptoWallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)
  app                   DeFiApp           @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([walletId, contractAddress, network, syncSource])
  @@index([walletId])
  @@index([appId])
  @@index([network])
  @@index([metaType])
  @@index([balanceUSD])
  @@index([isActive])
  @@index([lastSyncAt])
  @@map("defi_app_positions")
}

model CryptoPortfolio {
  id                  String       @id @default(cuid())
  walletId            String       @unique
  totalPositionsValue Decimal      @db.Decimal(12, 2)
  walletValue         Decimal      @default(0) @db.Decimal(12, 2)
  depositedValue      Decimal      @default(0) @db.Decimal(12, 2)
  borrowedValue       Decimal      @default(0) @db.Decimal(12, 2)
  lockedValue         Decimal      @default(0) @db.Decimal(12, 2)
  stakedValue         Decimal      @default(0) @db.Decimal(12, 2)
  arbitrumValue       Decimal      @default(0) @db.Decimal(12, 2)
  avalancheValue      Decimal      @default(0) @db.Decimal(12, 2)
  baseValue           Decimal      @default(0) @db.Decimal(12, 2)
  bscValue            Decimal      @default(0) @db.Decimal(12, 2)
  celoValue           Decimal      @default(0) @db.Decimal(12, 2)
  ethereumValue       Decimal      @default(0) @db.Decimal(12, 2)
  fantomValue         Decimal      @default(0) @db.Decimal(12, 2)
  lineaValue          Decimal      @default(0) @db.Decimal(12, 2)
  polygonValue        Decimal      @default(0) @db.Decimal(12, 2)
  absolute24hChange   Decimal?     @db.Decimal(12, 2)
  percent24hChange    Decimal?     @db.Decimal(8, 4)
  rawZerionData       Json?
  lastSyncAt          DateTime     @default(now())
  dataFreshness       String?
  syncSource          String       @default("zerion")
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  wallet              CryptoWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([lastSyncAt])
  @@index([totalPositionsValue])
  @@map("crypto_portfolios")
}

model CryptoPortfolioSnapshot {
  id                    String        @id @default(cuid())
  userId                String
  walletId              String?
  totalValueUsd         Decimal       @db.Decimal(12, 2)
  totalAssets           Int
  totalNfts             Int
  totalDeFiValue        Decimal       @db.Decimal(12, 2)
  dayChange             Decimal?      @db.Decimal(12, 2)
  dayChangePct          Decimal?      @db.Decimal(8, 4)
  weekChange            Decimal?      @db.Decimal(12, 2)
  weekChangePct         Decimal?      @db.Decimal(8, 4)
  monthChange           Decimal?      @db.Decimal(12, 2)
  monthChangePct        Decimal?      @db.Decimal(8, 4)
  topAssets             Json
  networkDistribution   Json
  assetTypeDistribution Json
  snapshotDate          DateTime      @default(now())
  createdAt             DateTime      @default(now())
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet                CryptoWallet? @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([walletId])
  @@index([snapshotDate])
  @@map("crypto_portfolio_snapshots")
}

// Global Crypto Asset Registry (deduplicated assets)
model CryptoAssetRegistry {
  id              String           @id @default(cuid())
  
  // Asset identification  
  symbol          String           // ETH, BTC, USDC
  name            String           // Ethereum, Bitcoin, USD Coin
  contractAddress String?          // For tokens, null for native coins
  decimals        Int              @default(18)
  type            AssetType
  network         BlockchainNetwork
  
  // Asset metadata
  logoUrl         String?
  websiteUrl      String?
  description     String?
  isVerified      Boolean          @default(false)
  
  // Market data (from Zerion)
  price           Decimal?         @db.Decimal(18, 8)
  priceUsd        Decimal?         @db.Decimal(12, 2)
  marketCap       Decimal?         @db.Decimal(15, 2)
  volume24h       Decimal?         @db.Decimal(15, 2)
  change24h       Decimal?         @db.Decimal(8, 4) // Percentage
  
  // Update tracking
  lastPriceUpdate DateTime?
  priceUpdateCount Int             @default(0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  positions       CryptoPosition[]
  transactions    CryptoTransaction[] @relation("AssetTransactions")
  
  @@unique([contractAddress, network])
  @@unique([symbol, network, contractAddress])
  @@index([symbol])
  @@index([network])
  @@index([lastPriceUpdate])
  @@map("crypto_asset_registry")
}

// Temporary - keep old table during migration
model crypto_assets {
  id              String              @id
  walletId        String
  symbol          String
  name            String
  contractAddress String?
  decimals        Int                 @default(18)
  type            AssetType
  network         BlockchainNetwork
  logoUrl         String?
  websiteUrl      String?
  description     String?
  isVerified      Boolean             @default(false)
  price           Decimal?            @db.Decimal(18, 8)
  priceUsd        Decimal?            @db.Decimal(12, 2)
  marketCap       Decimal?            @db.Decimal(15, 2)
  volume24h       Decimal?            @db.Decimal(15, 2)
  change24h       Decimal?            @db.Decimal(8, 4)
  lastPriceUpdate DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime
  crypto_wallets  CryptoWallet        @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, contractAddress, network])
  @@unique([walletId, symbol, network, contractAddress])
  @@index([network])
  @@index([symbol])
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

enum PlanType {
  FREE
  PRO
  ULTIMATE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIAL
  EXPIRED
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
  MORTGAGE
  CRYPTO
}

enum WalletType {
  HOT_WALLET
  COLD_WALLET
  EXCHANGE
  MULTI_SIG
  SMART_CONTRACT
}

enum BlockchainNetwork {
  ETHEREUM
  POLYGON
  BSC
  ARBITRUM
  OPTIMISM
  AVALANCHE
  SOLANA
  BITCOIN
  BASE
  FANTOM
  CRONOS
  GNOSIS
  AURORA
  CELO
  MOONBEAM
  KAVA
}

enum AssetType {
  TOKEN
  COIN
  LP_TOKEN
  STAKED_TOKEN
  YIELD_TOKEN
  GOVERNANCE_TOKEN
}

enum TransactionType {
  SEND
  RECEIVE
  SWAP
  STAKE
  UNSTAKE
  LIQUIDITY_ADD
  LIQUIDITY_REMOVE
  BRIDGE
  APPROVE
  CLAIM
  MINT
  BURN
  CONTRACT_INTERACTION
  NFT_TRANSFER
  NFT_MINT
  NFT_BURN
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  DROPPED
}

enum NFTStandard {
  ERC721
  ERC1155
  SOLANA_NFT
  BTC_ORDINALS
}
